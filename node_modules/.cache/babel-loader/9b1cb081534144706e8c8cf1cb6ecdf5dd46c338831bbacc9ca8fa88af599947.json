{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\01-starting-project\\\\01-starting-project\\\\src\\\\pages\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport PlanetList from \"../components/Planets/PlanetList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetPage = () => {\n  _s();\n  const [planets, setPlanets] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\n  const planetsPerPage = 10;\n  const fetchPlanetsHandler = useCallback(async url => {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const transformedPlanets = data.results.map(transformPlanetData);\n      setPlanets(transformedPlanets);\n      setNextPageUrl(data.next);\n      setPreviousPageUrl(data.previous);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  }, []);\n  const transformPlanetData = planetData => {\n    return {\n      id: planetData.name,\n      climate: planetData.climate,\n      terrain: planetData.terrain,\n      population: planetData.population,\n      diameter: planetData.diameter,\n      gravity: planetData.gravity,\n      rotationPeriod: planetData.rotation_period,\n      orbitalPeriod: planetData.orbital_period,\n      surfaceWater: planetData.surface_water,\n      residents: planetData.residents,\n      films: planetData.films,\n      created: planetData.created,\n      edited: planetData.edited,\n      url: planetData.url\n    };\n  };\n  useEffect(() => {\n    // Fetch planets when the component mounts and when nextPageUrl changes\n    fetchPlanetsHandler(nextPageUrl);\n  }, [fetchPlanetsHandler, nextPageUrl]);\n  const nextPageHandler = () => {\n    if (nextPageUrl) {\n      setCurrentPage(prevPage => prevPage + 1);\n      fetchPlanetsHandler(nextPageUrl);\n    }\n  };\n  const backPageHandler = () => {\n    if (previousPageUrl) {\n      setCurrentPage(prevPage => prevPage - 1);\n      fetchPlanetsHandler(previousPageUrl);\n    }\n  };\n\n  // Calculate the total number of pages\n  const totalPages = Math.ceil(planets.length / planetsPerPage);\n\n  // Calculate the range of planets to display based on current page and planets per page\n  const startIndex = currentPage * planetsPerPage;\n  const endIndex = startIndex + planetsPerPage;\n  const displayedPlanets = planets.slice(startIndex, endIndex);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Page \", currentPage + 1, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(PlanetList, {\n        planets: displayedPlanets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetPage, \"ozpXyl1XNL9d7OmV8xSDKz7mc8k=\");\n_c = PlanetPage;\nexport default PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","PlanetList","jsxDEV","_jsxDEV","PlanetPage","_s","planets","setPlanets","currentPage","setCurrentPage","nextPageUrl","setNextPageUrl","previousPageUrl","setPreviousPageUrl","planetsPerPage","fetchPlanetsHandler","url","response","fetch","ok","Error","status","data","json","transformedPlanets","results","map","transformPlanetData","next","previous","error","console","planetData","id","name","climate","terrain","population","diameter","gravity","rotationPeriod","rotation_period","orbitalPeriod","orbital_period","surfaceWater","surface_water","residents","films","created","edited","nextPageHandler","prevPage","backPageHandler","totalPages","Math","ceil","length","startIndex","endIndex","displayedPlanets","slice","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/01-starting-project/01-starting-project/src/pages/PlanetPage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport PlanetList from \"../components/Planets/PlanetList\";\r\n\r\nconst PlanetPage = () => {\r\n  const [planets, setPlanets] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\r\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\r\n  const planetsPerPage = 10;\r\n\r\n  const fetchPlanetsHandler = useCallback(async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      const transformedPlanets = data.results.map(transformPlanetData);\r\n  \r\n      setPlanets(transformedPlanets);\r\n      setNextPageUrl(data.next);\r\n      setPreviousPageUrl(data.previous);\r\n    } catch (error) {\r\n      console.error('Fetch error:', error);\r\n    }\r\n  }, []);\r\n  \r\n  const transformPlanetData = (planetData) => {\r\n    return {\r\n      id: planetData.name,\r\n      climate: planetData.climate,\r\n      terrain: planetData.terrain,\r\n      population: planetData.population,\r\n      diameter: planetData.diameter,\r\n      gravity: planetData.gravity,\r\n      rotationPeriod: planetData.rotation_period,\r\n      orbitalPeriod: planetData.orbital_period,\r\n      surfaceWater: planetData.surface_water,\r\n      residents: planetData.residents,\r\n      films: planetData.films,\r\n      created: planetData.created,\r\n      edited: planetData.edited,\r\n      url: planetData.url,\r\n    };\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Fetch planets when the component mounts and when nextPageUrl changes\r\n    fetchPlanetsHandler(nextPageUrl);\r\n  }, [fetchPlanetsHandler, nextPageUrl]);\r\n\r\n  const nextPageHandler = () => {\r\n    if (nextPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n      fetchPlanetsHandler(nextPageUrl);\r\n    }\r\n  };\r\n\r\n  const backPageHandler = () => {\r\n    if (previousPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n      fetchPlanetsHandler(previousPageUrl);\r\n    }\r\n  };\r\n\r\n  // Calculate the total number of pages\r\n  const totalPages = Math.ceil(planets.length / planetsPerPage);\r\n\r\n  // Calculate the range of planets to display based on current page and planets per page\r\n  const startIndex = currentPage * planetsPerPage;\r\n  const endIndex = startIndex + planetsPerPage;\r\n  const displayedPlanets = planets.slice(startIndex, endIndex);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <h2>Page {currentPage + 1} of {totalPages}</h2>\r\n      </section>\r\n      <section>\r\n        <button onClick={backPageHandler} disabled={!previousPageUrl}>Back</button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next</button>\r\n      </section>\r\n      <section>\r\n        <PlanetList planets={displayedPlanets} />\r\n      </section>\r\n      <section>\r\n        <button onClick={backPageHandler} disabled={!previousPageUrl}>Back</button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next</button>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlanetPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}