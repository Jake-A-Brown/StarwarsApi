{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\01-starting-project\\\\01-starting-project\\\\src\\\\pages\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport PlanetList from \"./components/PlanetList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetPage = () => {\n  _s();\n  const [planets, setPlanets] = useState([]);\n  const fetchPlanetsHandler = useCallback(async () => {\n    const response = await fetch('https://swapi.dev/api/planets');\n    const data = await response.json();\n    const transformedPlanets = data.results.map(planetData => {\n      return {\n        id: planetData.name,\n        climate: planetData.climate,\n        terrain: planetData.terrain,\n        pops: planetData.population\n      };\n    });\n    setPlanets(transformedPlanets);\n  }, []);\n  useEffect(() => {\n    fetchPlanetsHandler();\n  }, [fetchPlanetsHandler]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPlanetsHandler,\n        children: \"Fetch planets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(PlanetList, {\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetPage, \"D7A3y4zviOshpZogHr+t5M+Z3FU=\");\n_c = PlanetPage;\nexport default PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","PlanetList","jsxDEV","_jsxDEV","PlanetPage","_s","planets","setPlanets","fetchPlanetsHandler","response","fetch","data","json","transformedPlanets","results","map","planetData","id","name","climate","terrain","pops","population","Fragment","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/01-starting-project/01-starting-project/src/pages/PlanetPage.js"],"sourcesContent":["import React, {useEffect, useState, useCallback} from \"react\";\r\n\r\nimport PlanetList from \"./components/PlanetList\";\r\n\r\n\r\nconst PlanetPage = () => {\r\n    const [planets, setPlanets] = useState([]);\r\n\r\n    const fetchPlanetsHandler = useCallback(async () => {\r\n        const response = await fetch('https://swapi.dev/api/planets');\r\n        const data = await response.json();\r\n    \r\n        const transformedPlanets = data.results.map((planetData) =>{\r\n          return{\r\n            id: planetData.name,\r\n            climate: planetData.climate,\r\n            terrain: planetData.terrain,\r\n            pops: planetData.population,\r\n          }\r\n        });\r\n        setPlanets(transformedPlanets);\r\n      },[]);\r\n    \r\n      useEffect(() => {\r\n        \r\n        fetchPlanetsHandler();\r\n      }, [fetchPlanetsHandler]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n      <button onClick={fetchPlanetsHandler}>Fetch planets</button>\r\n      </section>\r\n      <section>\r\n      <PlanetList planets={planets}/>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlanetPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAO,OAAO;AAE7D,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,mBAAmB,GAAGR,WAAW,CAAC,YAAY;IAChD,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC7D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,MAAMC,kBAAkB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,UAAU,IAAI;MACzD,OAAM;QACJC,EAAE,EAAED,UAAU,CAACE,IAAI;QACnBC,OAAO,EAAEH,UAAU,CAACG,OAAO;QAC3BC,OAAO,EAAEJ,UAAU,CAACI,OAAO;QAC3BC,IAAI,EAAEL,UAAU,CAACM;MACnB,CAAC;IACH,CAAC,CAAC;IACFf,UAAU,CAACM,kBAAkB,CAAC;EAChC,CAAC,EAAC,EAAE,CAAC;EAELf,SAAS,CAAC,MAAM;IAEdU,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;EAE7B,oBACEL,OAAA,CAACN,KAAK,CAAC0B,QAAQ;IAAAC,QAAA,gBACbrB,OAAA;MAAAqB,QAAA,eACArB,OAAA;QAAQsB,OAAO,EAAEjB,mBAAoB;QAAAgB,QAAA,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACV1B,OAAA;MAAAqB,QAAA,eACArB,OAAA,CAACF,UAAU;QAACK,OAAO,EAAEA;MAAQ;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAErB,CAAC;AAACxB,EAAA,CAjCID,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAmChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}