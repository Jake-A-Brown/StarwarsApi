{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\01-starting-project\\\\01-starting-project\\\\src\\\\pages\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\n// import React, {useEffect, useState, useCallback} from \"react\";\n\n// import PlanetList from \"../components/PlanetList\";\n\n// const PlanetPage = () => {\n//     const [planets, setPlanets] = useState([]);\n\n//     const fetchPlanetsHandler = useCallback(async () => {\n//         const response = await fetch('https://swapi.dev/api/planets');\n//         const data = await response.json();\n\n//         const transformedPlanets = data.results.map((planetData) =>{\n//           return{\n//             id: planetData.name,\n//             climate: planetData.climate,\n//             terrain: planetData.terrain,\n//             pops: planetData.population,\n//           }\n//         });\n//         setPlanets(transformedPlanets);\n//       },[]);\n\n//       useEffect(() => {\n\n//         fetchPlanetsHandler();\n//       }, [fetchPlanetsHandler]);\n\n//   return (\n//     <React.Fragment>\n//       <section>\n//       <button onClick={fetchPlanetsHandler}>Fetch planets</button>\n//       </section>\n//       <section>\n//       <PlanetList planets={planets}/>\n//       </section>\n//     </React.Fragment>\n//   );\n// };\n\n// export default PlanetPage;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport PlanetList from \"../components/PlanetList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetPage = () => {\n  _s();\n  const [planets, setPlanets] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\n  const planetsPerPage = 20;\n  const fetchPlanetsHandler = useCallback(async () => {\n    const response = await fetch(nextPageUrl);\n    const data = await response.json();\n    const transformedPlanets = data.results.map(planetData => {\n      return {\n        id: planetData.name,\n        climate: planetData.climate,\n        terrain: planetData.terrain,\n        pops: planetData.population\n      };\n    });\n    setPlanets(prevPlanets => [...prevPlanets, ...transformedPlanets]);\n    setNextPageUrl(data.next); // Update the next page URL\n  }, [nextPageUrl]);\n  const nextPageHandler = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n    fetchPlanetsHandler();\n  };\n  useEffect(() => {\n    fetchPlanetsHandler();\n  }, [fetchPlanetsHandler]);\n\n  // Calculate which planets to display based on the current page\n  const startIndex = (currentPage - 1) * planetsPerPage;\n  const endIndex = startIndex + planetsPerPage;\n  const visiblePlanets = planets.slice(startIndex, endIndex);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(PlanetList, {\n        planets: visiblePlanets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetPage, \"ocPlGFNo0233ZTiSPh6JRFQcKVM=\");\n_c = PlanetPage;\nexport default PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","PlanetList","jsxDEV","_jsxDEV","PlanetPage","_s","planets","setPlanets","currentPage","setCurrentPage","nextPageUrl","setNextPageUrl","planetsPerPage","fetchPlanetsHandler","response","fetch","data","json","transformedPlanets","results","map","planetData","id","name","climate","terrain","pops","population","prevPlanets","next","nextPageHandler","prevPage","startIndex","endIndex","visiblePlanets","slice","Fragment","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/01-starting-project/01-starting-project/src/pages/PlanetPage.js"],"sourcesContent":["// import React, {useEffect, useState, useCallback} from \"react\";\r\n\r\n// import PlanetList from \"../components/PlanetList\";\r\n\r\n\r\n// const PlanetPage = () => {\r\n//     const [planets, setPlanets] = useState([]);\r\n\r\n//     const fetchPlanetsHandler = useCallback(async () => {\r\n//         const response = await fetch('https://swapi.dev/api/planets');\r\n//         const data = await response.json();\r\n    \r\n//         const transformedPlanets = data.results.map((planetData) =>{\r\n//           return{\r\n//             id: planetData.name,\r\n//             climate: planetData.climate,\r\n//             terrain: planetData.terrain,\r\n//             pops: planetData.population,\r\n//           }\r\n//         });\r\n//         setPlanets(transformedPlanets);\r\n//       },[]);\r\n    \r\n//       useEffect(() => {\r\n        \r\n//         fetchPlanetsHandler();\r\n//       }, [fetchPlanetsHandler]);\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <section>\r\n//       <button onClick={fetchPlanetsHandler}>Fetch planets</button>\r\n//       </section>\r\n//       <section>\r\n//       <PlanetList planets={planets}/>\r\n//       </section>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default PlanetPage;\r\n\r\n\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport PlanetList from \"../components/PlanetList\";\r\n\r\nconst PlanetPage = () => {\r\n  const [planets, setPlanets] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\r\n\r\n  const planetsPerPage = 20;\r\n\r\n  const fetchPlanetsHandler = useCallback(async () => {\r\n    const response = await fetch(nextPageUrl);\r\n    const data = await response.json();\r\n\r\n    const transformedPlanets = data.results.map((planetData) => {\r\n      return {\r\n        id: planetData.name,\r\n        climate: planetData.climate,\r\n        terrain: planetData.terrain,\r\n        pops: planetData.population,\r\n      };\r\n    });\r\n\r\n    setPlanets((prevPlanets) => [...prevPlanets, ...transformedPlanets]);\r\n    setNextPageUrl(data.next); // Update the next page URL\r\n  }, [nextPageUrl]);\r\n\r\n  const nextPageHandler = () => {\r\n    setCurrentPage((prevPage) => prevPage + 1);\r\n    fetchPlanetsHandler();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPlanetsHandler();\r\n  }, [fetchPlanetsHandler]);\r\n\r\n  // Calculate which planets to display based on the current page\r\n  const startIndex = (currentPage - 1) * planetsPerPage;\r\n  const endIndex = startIndex + planetsPerPage;\r\n  const visiblePlanets = planets.slice(startIndex, endIndex);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next Page</button>\r\n      </section>\r\n      <section>\r\n        <PlanetList planets={visiblePlanets} />\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlanetPage;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}