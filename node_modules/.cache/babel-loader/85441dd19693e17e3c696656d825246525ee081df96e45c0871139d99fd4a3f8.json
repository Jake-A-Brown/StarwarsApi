{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\nimport PlanetImage from \"../components/Planets/PlanetImage\";\nimport React, { useState, useCallback } from \"react\";\nimport PlanetList from \"../components/Planets/PlanetList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetPage = () => {\n  _s();\n  const [planets, setPlanets] = useState([]);\n  const [currentPage, setCurrentPageIndex] = useState(1);\n  const [nextPageUrl, setNextPageUrl] = useState(`https://swapi.dev/api/planets/?count=5`);\n  const [previousPageUrl, setPreviousPageUrl] = useState(\"https://swapi.dev/api/planets/\");\n  const fetchPlanetsHandler = useCallback(async url => {\n    const response = await fetch(url);\n    const data = await response.json();\n    const transformedPlanets = data.results.map(planetData => {\n      // // Find the corresponding planet image in the planetImages array\n      const planetImage = PlanetImage.find(img => img.name === planetData.name);\n      return {\n        id: planetData.name,\n        climate: planetData.climate,\n        terrain: planetData.terrain,\n        population: planetData.population,\n        diameter: planetData.diameter,\n        gravity: planetData.gravity,\n        rotationPeriod: planetData.rotation_period,\n        orbitalPeriod: planetData.orbital_period,\n        surfaceWater: planetData.surface_water,\n        residents: planetData.residents,\n        films: planetData.films,\n        created: planetData.created,\n        edited: planetData.edited,\n        url: planetData.url,\n        // // Add the imageSrc property to the planet data\n        imageSrc: planetImage ? planetImage.imageSrc : \"\" // Default to an empty string if no image found\n      };\n    });\n\n    setPlanets(transformedPlanets);\n    setNextPageUrl(data.next);\n    setPreviousPageUrl(data.previous);\n    setCurrentPageIndex(0);\n  }, []);\n  const nextPageHandler = () => {\n    if (nextPageUrl) {\n      fetchPlanetsHandler(nextPageUrl);\n    }\n  };\n  const backPageHandler = () => {\n    if (previousPageUrl) {\n      fetchPlanetsHandler(previousPageUrl);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Page \", currentPage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlanetList, {\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetPage, \"yADMlrBhkGgUobCMQCfmqfLLbUU=\");\n_c = PlanetPage;\nexport default PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["PlanetImage","React","useState","useCallback","PlanetList","jsxDEV","_jsxDEV","PlanetPage","_s","planets","setPlanets","currentPage","setCurrentPageIndex","nextPageUrl","setNextPageUrl","previousPageUrl","setPreviousPageUrl","fetchPlanetsHandler","url","response","fetch","data","json","transformedPlanets","results","map","planetData","planetImage","find","img","name","id","climate","terrain","population","diameter","gravity","rotationPeriod","rotation_period","orbitalPeriod","orbital_period","surfaceWater","surface_water","residents","films","created","edited","imageSrc","next","previous","nextPageHandler","backPageHandler","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/PlanetPage.js"],"sourcesContent":["import PlanetImage from \"../components/Planets/PlanetImage\";\r\nimport React, { useState, useCallback } from \"react\";\r\nimport PlanetList from \"../components/Planets/PlanetList\";\r\n\r\nconst PlanetPage = () => {\r\n  const [planets, setPlanets] = useState([]);\r\n  const [currentPage, setCurrentPageIndex] = useState(1);\r\n  const [nextPageUrl, setNextPageUrl] = useState(\r\n    `https://swapi.dev/api/planets/?count=5`\r\n  );\r\n  const [previousPageUrl, setPreviousPageUrl] = useState(\"https://swapi.dev/api/planets/\");\r\n\r\n  const fetchPlanetsHandler = useCallback(async (url) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    const transformedPlanets = data.results.map((planetData) => {\r\n      // // Find the corresponding planet image in the planetImages array\r\n      const planetImage = PlanetImage.find(\r\n        (img) => img.name === planetData.name\r\n      );\r\n      return {\r\n        id: planetData.name,\r\n        climate: planetData.climate,\r\n        terrain: planetData.terrain,\r\n        population: planetData.population,\r\n        diameter: planetData.diameter,\r\n        gravity: planetData.gravity,\r\n        rotationPeriod: planetData.rotation_period,\r\n        orbitalPeriod: planetData.orbital_period,\r\n        surfaceWater: planetData.surface_water,\r\n        residents: planetData.residents,\r\n        films: planetData.films,\r\n        created: planetData.created,\r\n        edited: planetData.edited,\r\n        url: planetData.url,\r\n        // // Add the imageSrc property to the planet data\r\n        imageSrc: planetImage ? planetImage.imageSrc : \"\", // Default to an empty string if no image found\r\n      };\r\n    });\r\n\r\n    setPlanets(transformedPlanets);\r\n    setNextPageUrl(data.next);\r\n    setPreviousPageUrl(data.previous);\r\n    setCurrentPageIndex(0);\r\n  }, []);\r\n\r\n  const nextPageHandler = () => {\r\n    if (nextPageUrl) {\r\n      fetchPlanetsHandler(nextPageUrl);\r\n    }\r\n  };\r\n\r\n  const backPageHandler = () => {\r\n    if (previousPageUrl) {\r\n      fetchPlanetsHandler(previousPageUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <h4>Page {currentPage}</h4>\r\n        <button onClick={backPageHandler} disabled={!previousPageUrl}>\r\n          Back\r\n        </button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>\r\n          Next\r\n        </button>\r\n        <PlanetList planets={planets} />\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlanetPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}