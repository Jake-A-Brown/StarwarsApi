{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\01-starting-project\\\\01-starting-project\\\\src\\\\components\\\\Planets\\\\Planet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport style from './Planet.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planet = props => {\n  _s();\n  const [residentNames, setResidentNames] = useState([]);\n  const [filmTitles, setFilmTitles] = useState([]);\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleString(); // You can customize the format as needed\n  };\n\n  useEffect(() => {\n    // Fetch resident names\n    Promise.all(props.residents.map(residentUrl => fetch(residentUrl).then(response => response.json()).then(data => setResidentNames(prevNames => [...prevNames, data.name]))));\n\n    // Fetch film titles\n    Promise.all(props.films.map(filmUrl => fetch(filmUrl).then(response => response.json()).then(data => setFilmTitles(prevTitles => [...prevTitles, data.title]))));\n  }, [props.residents, props.films]);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: style.planet,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Name: \", props.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Climate: \", props.climate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Terrain: \", props.terrain]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Population: \", props.population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Diameter: \", props.diameter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gravity: \", props.gravity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rotation Period: \", props.rotationPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Orbital Period: \", props.orbitalPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Surface Water: \", props.surfaceWater]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Residents: \", residentNames.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Films: \", filmTitles.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created: \", formatTimestamp(props.created)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Edited: \", formatTimestamp(props.edited)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"URL: \", props.url]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Planet, \"8EHacgYwuV2RWnW4LoSmOqY4oz8=\");\n_c = Planet;\nexport default Planet;\nvar _c;\n$RefreshReg$(_c, \"Planet\");","map":{"version":3,"names":["React","useEffect","useState","style","jsxDEV","_jsxDEV","Planet","props","_s","residentNames","setResidentNames","filmTitles","setFilmTitles","formatTimestamp","timestamp","date","Date","toLocaleString","Promise","all","residents","map","residentUrl","fetch","then","response","json","data","prevNames","name","films","filmUrl","prevTitles","title","className","planet","children","id","fileName","_jsxFileName","lineNumber","columnNumber","climate","terrain","population","diameter","gravity","rotationPeriod","orbitalPeriod","surfaceWater","join","created","edited","url","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/01-starting-project/01-starting-project/src/components/Planets/Planet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport style from './Planet.module.css';\r\n\r\nconst Planet = (props) => {\r\n  const [residentNames, setResidentNames] = useState([]);\r\n  const [filmTitles, setFilmTitles] = useState([]);\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString(); // You can customize the format as needed\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch resident names\r\n    Promise.all(props.residents.map((residentUrl) =>\r\n      fetch(residentUrl)\r\n        .then(response => response.json())\r\n        .then(data => setResidentNames(prevNames => [...prevNames, data.name]))\r\n    ));\r\n\r\n    // Fetch film titles\r\n    Promise.all(props.films.map((filmUrl) =>\r\n      fetch(filmUrl)\r\n        .then(response => response.json())\r\n        .then(data => setFilmTitles(prevTitles => [...prevTitles, data.title]))\r\n    ));\r\n  }, [props.residents, props.films]);\r\n\r\n  return (\r\n    <li className={style.planet}>\r\n      <h4>Name: {props.id}</h4>\r\n      <h3>Climate: {props.climate}</h3>\r\n      <h3>Terrain: {props.terrain}</h3>\r\n      <p>Population: {props.population}</p>\r\n      <p>Diameter: {props.diameter}</p>\r\n      <p>Gravity: {props.gravity}</p>\r\n      <p>Rotation Period: {props.rotationPeriod}</p>\r\n      <p>Orbital Period: {props.orbitalPeriod}</p>\r\n      <p>Surface Water: {props.surfaceWater}</p>\r\n      <p>Residents: {residentNames.join(', ')}</p>\r\n      <p>Films: {filmTitles.join(', ')}</p>\r\n      <p>Created: {formatTimestamp(props.created)}</p>\r\n      <p>Edited: {formatTimestamp(props.edited)}</p>\r\n      <p>URL: {props.url}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}