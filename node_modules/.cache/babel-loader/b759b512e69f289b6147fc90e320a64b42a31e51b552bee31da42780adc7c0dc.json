{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\Movie\\\\MoviePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './MoviePage.css';\nimport MovieImage from './MovieImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoviePage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFetch, setIsFetch] = useState(true);\n  const handleMovies = async () => {\n    try {\n      setLoading(true);\n      setIsFetch(false);\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n      setMovies(data.results);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviepage-container\",\n    children: [\"Movies Page\", isFetch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMovies,\n      children: \"Starwars Motion Picture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }, this), movies.map(result => {\n      const movieInfo = MovieImage.find(movie => movie.title === result.title);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Star Wars\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [result.title, \" Episode \", result.episode_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: movieInfo ? movieInfo.movieImageSrc : '',\n          alt: result.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Director: \", result.director]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: result.opening_crawl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 23\n        }, this)]\n      }, result.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }, this);\n    }), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-bar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n};\n_s(MoviePage, \"LF/Z1SxtRPacNSfYnfPp/VT68AY=\");\n_c = MoviePage;\nexport default MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useState","MovieImage","jsxDEV","_jsxDEV","MoviePage","_s","movies","setMovies","loading","setLoading","isFetch","setIsFetch","handleMovies","response","fetch","data","json","results","error","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","result","movieInfo","find","movie","title","episode_id","src","movieImageSrc","alt","director","opening_crawl","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/Movie/MoviePage.js"],"sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\nimport './MoviePage.css';\r\nimport MovieImage from './MovieImage';\r\n\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFetch, setIsFetch] = useState(true);\r\n\r\n  const handleMovies = async () => {\r\n      try {\r\n          setLoading(true);\r\n          setIsFetch(false);\r\n\r\n          const response = await fetch('https://swapi.dev/api/films/');\r\n          const data = await response.json();\r\n\r\n          setMovies(data.results);\r\n          setLoading(false);\r\n      } catch (error) {\r\n          console.error('Error fetching movies:', error);\r\n      }\r\n  };\r\n\r\n  return (\r\n      <div className='moviepage-container'>\r\n          Movies Page\r\n          {isFetch && <button onClick={handleMovies}>Starwars Motion Picture</button>}\r\n          {/* <div className='movies-container'> */}\r\n          {movies.map((result) => {\r\n              const movieInfo = MovieImage.find((movie) => movie.title === result.title);\r\n\r\n              return (\r\n                  <div className='movie-items' key={result.title}>\r\n                      <h4>Star Wars</h4>\r\n                      <h4>{result.title} Episode {result.episode_id}</h4>\r\n                      <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} />\r\n                      <div>Director: {result.director}</div>\r\n                      <p>{result.opening_crawl}</p>\r\n                  </div>\r\n              );\r\n          })}\r\n          {/* </div> */}\r\n          {loading && <div className='loading-bar'>Loading...</div>}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}