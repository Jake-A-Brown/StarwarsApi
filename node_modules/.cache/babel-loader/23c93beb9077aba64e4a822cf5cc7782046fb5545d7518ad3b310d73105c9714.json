{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\Movie\\\\MovieDetails.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react';\n\n// import './MoviePage.css';\n// import MovieImage from './MovieImage';\n\n// const formatDate = (dateString) => {\n//     const date = new Date(dateString);\n//     return date.toLocaleString(); // Adjust this to your preferred date format\n//   };\n\n// const MoviePage = () => {\n//   const [movies, setMovies] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [isFetch, setIsFetch] = useState(true);\n\n//   const handleMovies = async () => {\n//       try {\n//           setLoading(true);\n//           setIsFetch(false);\n\n//           const response = await fetch('https://swapi.dev/api/films/');\n//           const data = await response.json();\n\n//           setMovies(data.results);\n//           setLoading(false);\n//       } catch (error) {\n//           console.error('Error fetching movies:', error);\n//       }\n//   };\n\n//   return (\n//       <div className='moviepage-container'>\n//           {isFetch && <button onClick={handleMovies}>Motion Picture</button>}\n//           <div className='movies-container'>\n//           {movies.map((result) => {\n//               const movieInfo = MovieImage.find((movie) => movie.title === result.title);\n\n//               return (\n//                   <div className='movie-items' key={result.title}>\n//                       <h4>Star Wars</h4>\n//                       <h4>{result.title} Episode {result.episode_id}</h4>\n//                       <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} />\n//                       <p>{result.characters}</p>\n//                       <div>Created: {formatDate(result.created)}</div>\n//                       <div>Edited: {formatDate(result.edited)}</div>\n//                       <div>URL: {result.url}</div>\n//                   </div>\n//               );\n//           })}\n//           </div>\n//           <div>\n//             {/**\n//              * People[]\n//              * species[]\n//              * Planets[]\n//              * vehicles[]\n//              * starships[]\n//              */}\n//           </div>\n//           {loading && <div className='loading-bar'>Loading...</div>}\n//       </div>\n//   );\n// };\n\n// export default MoviePage;\n\nimport React, { useState, useEffect } from 'react';\nimport './MoviePage.css';\nimport MovieImage from './MovieImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleString(); // Adjust this to your preferred date format\n};\n\nconst MoviePage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFetch, setIsFetch] = useState(true);\n  useEffect(() => {\n    const handleMovies = async () => {\n      try {\n        setLoading(true);\n        setIsFetch(false);\n        const response = await fetch('https://swapi.dev/api/films/');\n        const data = await response.json();\n        setMovies(data.results);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    if (isFetch) {\n      handleMovies();\n    }\n  }, [isFetch]);\n  const fetchCharacterInfo = async characterUrls => {\n    try {\n      const characterResponses = await Promise.all(characterUrls.map(url => fetch(url).then(response => response.json())));\n      return characterResponses;\n    } catch (error) {\n      console.error('Error fetching character information:', error);\n      return [];\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviepage-container\",\n    children: [isFetch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMovies,\n      children: \"Motion Picture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: movies.map(result => {\n        const movieInfo = MovieImage.find(movie => movie.title === result.title);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-items\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Star Wars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [result.title, \" Episode \", result.episode_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: movieInfo ? movieInfo.movieImageSrc : '',\n            alt: result.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Characters:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: result.characters.length > 0 && fetchCharacterInfo(result.characters).map((character, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: character.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Created: \", formatDate(result.created)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Edited: \", formatDate(result.edited)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"URL: \", result.url]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)]\n        }, result.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-bar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(MoviePage, \"uFr2UByrR7fdzMQp18ELxXGfNVc=\");\n_c = MoviePage;\nexport default MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useState","useEffect","MovieImage","jsxDEV","_jsxDEV","formatDate","dateString","date","Date","toLocaleString","MoviePage","_s","movies","setMovies","loading","setLoading","isFetch","setIsFetch","handleMovies","response","fetch","data","json","results","error","console","fetchCharacterInfo","characterUrls","characterResponses","Promise","all","map","url","then","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","result","movieInfo","find","movie","title","episode_id","src","movieImageSrc","alt","characters","length","character","index","name","created","edited","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/Movie/MovieDetails.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n\r\n\r\n// import './MoviePage.css';\r\n// import MovieImage from './MovieImage';\r\n\r\n// const formatDate = (dateString) => {\r\n//     const date = new Date(dateString);\r\n//     return date.toLocaleString(); // Adjust this to your preferred date format\r\n//   };\r\n\r\n\r\n// const MoviePage = () => {\r\n//   const [movies, setMovies] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [isFetch, setIsFetch] = useState(true);\r\n\r\n//   const handleMovies = async () => {\r\n//       try {\r\n//           setLoading(true);\r\n//           setIsFetch(false);\r\n\r\n//           const response = await fetch('https://swapi.dev/api/films/');\r\n//           const data = await response.json();\r\n\r\n//           setMovies(data.results);\r\n//           setLoading(false);\r\n//       } catch (error) {\r\n//           console.error('Error fetching movies:', error);\r\n//       }\r\n//   };\r\n\r\n//   return (\r\n//       <div className='moviepage-container'>\r\n//           {isFetch && <button onClick={handleMovies}>Motion Picture</button>}\r\n//           <div className='movies-container'>\r\n//           {movies.map((result) => {\r\n//               const movieInfo = MovieImage.find((movie) => movie.title === result.title);\r\n\r\n//               return (\r\n//                   <div className='movie-items' key={result.title}>\r\n//                       <h4>Star Wars</h4>\r\n//                       <h4>{result.title} Episode {result.episode_id}</h4>\r\n//                       <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} />\r\n//                       <p>{result.characters}</p>\r\n//                       <div>Created: {formatDate(result.created)}</div>\r\n//                       <div>Edited: {formatDate(result.edited)}</div>\r\n//                       <div>URL: {result.url}</div>\r\n//                   </div>\r\n//               );\r\n//           })}\r\n//           </div>\r\n//           <div>\r\n//             {/**\r\n//              * People[]\r\n//              * species[]\r\n//              * Planets[]\r\n//              * vehicles[]\r\n//              * starships[]\r\n//              */}\r\n//           </div>\r\n//           {loading && <div className='loading-bar'>Loading...</div>}\r\n//       </div>\r\n//   );\r\n// };\r\n\r\n// export default MoviePage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport './MoviePage.css';\r\nimport MovieImage from './MovieImage';\r\n\r\nconst formatDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleString(); // Adjust this to your preferred date format\r\n};\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFetch, setIsFetch] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const handleMovies = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setIsFetch(false);\r\n\r\n        const response = await fetch('https://swapi.dev/api/films/');\r\n        const data = await response.json();\r\n\r\n        setMovies(data.results);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching movies:', error);\r\n      }\r\n    };\r\n\r\n    if (isFetch) {\r\n      handleMovies();\r\n    }\r\n  }, [isFetch]);\r\n\r\n  const fetchCharacterInfo = async (characterUrls) => {\r\n    try {\r\n      const characterResponses = await Promise.all(\r\n        characterUrls.map((url) => fetch(url).then((response) => response.json()))\r\n      );\r\n      return characterResponses;\r\n    } catch (error) {\r\n      console.error('Error fetching character information:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='moviepage-container'>\r\n      {isFetch && <button onClick={handleMovies}>Motion Picture</button>}\r\n      <div className='movies-container'>\r\n        {movies.map((result) => {\r\n          const movieInfo = MovieImage.find((movie) => movie.title === result.title);\r\n\r\n          return (\r\n            <div className='movie-items' key={result.title}>\r\n              <h4>Star Wars</h4>\r\n              <h4>{result.title} Episode {result.episode_id}</h4>\r\n              <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} />\r\n              <div>\r\n                <h5>Characters:</h5>\r\n                <ul>\r\n                  {result.characters.length > 0 &&\r\n                    fetchCharacterInfo(result.characters).map((character, index) => (\r\n                      <li key={index}>{character.name}</li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n              <div>Created: {formatDate(result.created)}</div>\r\n              <div>Edited: {formatDate(result.edited)}</div>\r\n              <div>URL: {result.url}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        {/**\r\n         * People[]\r\n         * species[]\r\n         * Planets[]\r\n         * vehicles[]\r\n         * starships[]\r\n         */}\r\n      </div>\r\n      {loading && <div className='loading-bar'>Loading...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}