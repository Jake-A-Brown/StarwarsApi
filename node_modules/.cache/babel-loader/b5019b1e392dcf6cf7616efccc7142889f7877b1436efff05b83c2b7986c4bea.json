{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\Movie\\\\MoviePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './MoviePage.css';\nimport MovieImage from './MovieImage';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleString(); // Adjust this to your preferred date format\n};\n\nconst MoviePage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFetch, setIsFetch] = useState(true);\n  const handleMovies = async () => {\n    try {\n      setLoading(true);\n      setIsFetch(false);\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n      setMovies(data.results);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviepage-container\",\n    children: [isFetch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMovies,\n      children: \"Motion Picture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: movies.map(result => {\n        const movieInfo = MovieImage.find(movie => movie.title === result.title);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-items\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Star Wars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [result.title, \" Episode \", result.episode_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: movieInfo ? movieInfo.movieImageSrc : '',\n            alt: result.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Release Date: \", result.release_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Director: \", result.director]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Producer: \", result.producer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: result.opening_crawl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Created: \", formatDate(result.created)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Edited: \", formatDate(result.edited)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"URL: \", /*#__PURE__*/_jsxDEV(Link, {\n              to: result.url,\n              target: \"_blank\",\n              children: result.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 23\n          }, this)]\n        }, result.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-bar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n};\n_s(MoviePage, \"LF/Z1SxtRPacNSfYnfPp/VT68AY=\");\n_c = MoviePage;\nexport default MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useState","MovieImage","Link","jsxDEV","_jsxDEV","formatDate","dateString","date","Date","toLocaleString","MoviePage","_s","movies","setMovies","loading","setLoading","isFetch","setIsFetch","handleMovies","response","fetch","data","json","results","error","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","result","movieInfo","find","movie","title","episode_id","src","movieImageSrc","alt","release_date","director","producer","opening_crawl","created","edited","to","url","target","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/Movie/MoviePage.js"],"sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\nimport './MoviePage.css';\r\nimport MovieImage from './MovieImage';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString(); // Adjust this to your preferred date format\r\n  };\r\n\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFetch, setIsFetch] = useState(true);\r\n\r\n  const handleMovies = async () => {\r\n      try {\r\n          setLoading(true);\r\n          setIsFetch(false);\r\n\r\n          const response = await fetch('https://swapi.dev/api/films/');\r\n          const data = await response.json();\r\n\r\n          setMovies(data.results);\r\n          setLoading(false);\r\n      } catch (error) {\r\n          console.error('Error fetching movies:', error);\r\n      }\r\n  };\r\n\r\n  return (\r\n      <div className='moviepage-container'>\r\n          {isFetch && <button onClick={handleMovies}>Motion Picture</button>}\r\n          <div className='movies-container'>\r\n          {movies.map((result) => {\r\n              const movieInfo = MovieImage.find((movie) => movie.title === result.title);\r\n\r\n              return (\r\n                  <div className='movie-items' key={result.title}>\r\n                      <h4>Star Wars</h4>\r\n                      <h4>{result.title} Episode {result.episode_id}</h4>\r\n                      <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} />\r\n                      <div>Release Date: {result.release_date}</div>\r\n                      <div>Director: {result.director}</div>\r\n                      <div>Producer: {result.producer}</div>\r\n                      <p>{result.opening_crawl}</p>\r\n                      <div>Created: {formatDate(result.created)}</div>\r\n                      <div>Edited: {formatDate(result.edited)}</div>\r\n                      <div>URL: <Link to={result.url} target= '_blank'>{result.url}</Link></div>\r\n                  </div>\r\n              );\r\n          })}\r\n          </div>\r\n          <div>\r\n            {/**\r\n             * People[]\r\n             * species[]\r\n             * Planets[]\r\n             * vehicles[]\r\n             * starships[]\r\n             */}\r\n          </div>\r\n          {loading && <div className='loading-bar'>Loading...</div>}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}