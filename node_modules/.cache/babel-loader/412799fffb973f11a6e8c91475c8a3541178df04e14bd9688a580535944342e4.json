{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\01-starting-project\\\\01-starting-project\\\\src\\\\pages\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\n// import React, {useEffect, useState, useCallback} from \"react\";\n\n// import PlanetList from \"../components/PlanetList\";\n\n// const PlanetPage = () => {\n//     const [planets, setPlanets] = useState([]);\n\n//     const fetchPlanetsHandler = useCallback(async () => {\n//         const response = await fetch('https://swapi.dev/api/planets');\n//         const data = await response.json();\n\n//         const transformedPlanets = data.results.map((planetData) =>{\n//           return{\n//             id: planetData.name,\n//             climate: planetData.climate,\n//             terrain: planetData.terrain,\n//             pops: planetData.population,\n//           }\n//         });\n//         setPlanets(transformedPlanets);\n//       },[]);\n\n//       useEffect(() => {\n\n//         fetchPlanetsHandler();\n//       }, [fetchPlanetsHandler]);\n\n//   return (\n//     <React.Fragment>\n//       <section>\n//       <button onClick={fetchPlanetsHandler}>Fetch planets</button>\n//       </section>\n//       <section>\n//       <PlanetList planets={planets}/>\n//       </section>\n//     </React.Fragment>\n//   );\n// };\n\n// export default PlanetPage;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport PlanetList from \"../components/PlanetList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetPage = () => {\n  _s();\n  const [planets, setPlanets] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\n  const [fetchCompleted, setFetchCompleted] = useState(false);\n  const planetsPerPage = 10;\n  const fetchPlanetsHandler = useCallback(async url => {\n    if (!fetchCompleted) {\n      const response = await fetch(url);\n      const data = await response.json();\n      const transformedPlanets = data.results.map(planetData => {\n        return {\n          id: planetData.name,\n          climate: planetData.climate,\n          terrain: planetData.terrain,\n          pops: planetData.population\n        };\n      });\n      setPlanets(transformedPlanets);\n      setNextPageUrl(data.next);\n      setPreviousPageUrl(data.previous);\n      setFetchCompleted(true);\n    }\n  }, [fetchCompleted]);\n  const nextPageHandler = () => {\n    if (nextPageUrl) {\n      setCurrentPage(prevPage => prevPage + 1);\n      fetchPlanetsHandler(nextPageUrl);\n    }\n  };\n  const backPageHandler = () => {\n    if (previousPageUrl) {\n      setCurrentPage(prevPage => prevPage - 1);\n      fetchPlanetsHandler(previousPageUrl);\n    }\n  };\n  useEffect(() => {\n    fetchPlanetsHandler(nextPageUrl);\n  }, [fetchPlanetsHandler, nextPageUrl]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPlanetsHandler,\n        disabled: fetchCompleted,\n        children: fetchCompleted ? \"Planets Fetched\" : \"Fetch Planets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(PlanetList, {\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetPage, \"02PSwiflpO5Or5yZCp0x+jAoefk=\");\n_c = PlanetPage;\nexport default PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","PlanetList","jsxDEV","_jsxDEV","PlanetPage","_s","planets","setPlanets","currentPage","setCurrentPage","nextPageUrl","setNextPageUrl","previousPageUrl","setPreviousPageUrl","fetchCompleted","setFetchCompleted","planetsPerPage","fetchPlanetsHandler","url","response","fetch","data","json","transformedPlanets","results","map","planetData","id","name","climate","terrain","pops","population","next","previous","nextPageHandler","prevPage","backPageHandler","Fragment","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/01-starting-project/01-starting-project/src/pages/PlanetPage.js"],"sourcesContent":["// import React, {useEffect, useState, useCallback} from \"react\";\r\n\r\n// import PlanetList from \"../components/PlanetList\";\r\n\r\n\r\n// const PlanetPage = () => {\r\n//     const [planets, setPlanets] = useState([]);\r\n\r\n//     const fetchPlanetsHandler = useCallback(async () => {\r\n//         const response = await fetch('https://swapi.dev/api/planets');\r\n//         const data = await response.json();\r\n    \r\n//         const transformedPlanets = data.results.map((planetData) =>{\r\n//           return{\r\n//             id: planetData.name,\r\n//             climate: planetData.climate,\r\n//             terrain: planetData.terrain,\r\n//             pops: planetData.population,\r\n//           }\r\n//         });\r\n//         setPlanets(transformedPlanets);\r\n//       },[]);\r\n    \r\n//       useEffect(() => {\r\n        \r\n//         fetchPlanetsHandler();\r\n//       }, [fetchPlanetsHandler]);\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <section>\r\n//       <button onClick={fetchPlanetsHandler}>Fetch planets</button>\r\n//       </section>\r\n//       <section>\r\n//       <PlanetList planets={planets}/>\r\n//       </section>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default PlanetPage;\r\n\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport PlanetList from \"../components/PlanetList\";\r\n\r\nconst PlanetPage = () => {\r\n  const [planets, setPlanets] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\r\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\r\n  const [fetchCompleted, setFetchCompleted] = useState(false);\r\n\r\n  const planetsPerPage = 10;\r\n\r\n  const fetchPlanetsHandler = useCallback(async (url) => {\r\n    if (!fetchCompleted) {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      const transformedPlanets = data.results.map((planetData) => {\r\n        return {\r\n          id: planetData.name,\r\n          climate: planetData.climate,\r\n          terrain: planetData.terrain,\r\n          pops: planetData.population,\r\n        };\r\n      });\r\n\r\n      setPlanets(transformedPlanets);\r\n      setNextPageUrl(data.next);\r\n      setPreviousPageUrl(data.previous);\r\n      setFetchCompleted(true);\r\n    }\r\n  }, [fetchCompleted]);\r\n\r\n  const nextPageHandler = () => {\r\n    if (nextPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n      fetchPlanetsHandler(nextPageUrl);\r\n    }\r\n  };\r\n\r\n  const backPageHandler = () => {\r\n    if (previousPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n      fetchPlanetsHandler(previousPageUrl);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPlanetsHandler(nextPageUrl);\r\n  }, [fetchPlanetsHandler, nextPageUrl]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <button onClick={fetchPlanetsHandler} disabled={fetchCompleted}>\r\n          {fetchCompleted ? \"Planets Fetched\" : \"Fetch Planets\"}\r\n        </button>\r\n      </section>\r\n      <section>\r\n        <button onClick={backPageHandler} disabled={!previousPageUrl}>Back Page</button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next Page</button>\r\n      </section>\r\n      <section>\r\n        <PlanetList planets={planets} />\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlanetPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}