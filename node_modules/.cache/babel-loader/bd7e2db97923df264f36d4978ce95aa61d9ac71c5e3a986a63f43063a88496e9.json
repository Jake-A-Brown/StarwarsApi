{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\Movie\\\\MovieDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MoviePage.css';\nimport MovieImage from './MovieImage';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleString(); // Adjust this to your preferred date format\n};\n\nconst MovieDetails = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFetch, setIsFetch] = useState(true);\n  const [characterInfo, setCharacterInfo] = useState({});\n  const handleMovies = async () => {\n    try {\n      setLoading(true);\n      setIsFetch(false);\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n      setMovies(data.results);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  useEffect(() => {\n    if (isFetch) {\n      handleMovies();\n    }\n  }, [isFetch]);\n  const fetchSpeciesInfo = async speciesUrls => {\n    try {\n      const speciesResponses = await Promise.all(speciesUrls.map(url => fetch(url).then(response => response.json())));\n      const speciesNames = speciesResponses.map(species => species.name);\n      return speciesNames;\n    } catch (error) {\n      console.error('Error fetching species information:', error);\n      return [];\n    }\n  };\n  const fetchCharacterInfo = async characterUrls => {\n    try {\n      const characterResponses = await Promise.all(characterUrls.map(url => fetch(url).then(response => response.json())));\n      const characterNames = characterResponses.map(character => character.name);\n      return characterNames;\n    } catch (error) {\n      console.error('Error fetching character information:', error);\n      return [];\n    }\n  };\n  const fetchAndSetCharacterInfo = async (characterUrls, speciesUrls) => {\n    const names = await fetchCharacterInfo(characterUrls);\n    const species = await fetchSpeciesInfo(speciesUrls);\n    setCharacterInfo(prev => ({\n      ...prev,\n      [characterUrls]: {\n        names: names,\n        species: species\n      }\n    }));\n  };\n  useEffect(() => {\n    movies.forEach(movie => {\n      fetchAndSetCharacterInfo(movie.characters);\n    });\n  }, [movies]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviepage-container\",\n    children: [isFetch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMovies,\n      children: \"Motion Picture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: movies.map(result => {\n        const movieInfo = MovieImage.find(movie => movie.title === result.title);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-items\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Star Wars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [result.title, \" Episode \", result.episode_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Characters:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), characterInfo[result.characters] ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: characterInfo[result.characters].map((character, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [character, \"- \", characterInfo[result.characters].species[index]]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading characters...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Created: \", formatDate(result.created)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Edited: \", formatDate(result.edited)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"URL: \", /*#__PURE__*/_jsxDEV(Link, {\n              to: result.url,\n              target: \"_blank\",\n              children: result.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, result.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-bar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieDetails, \"xnaRJDj9KtDaedW4xvHWbBiDFHs=\");\n_c = MovieDetails;\nexport default MovieDetails;\nvar _c;\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"names":["React","useState","useEffect","MovieImage","Link","jsxDEV","_jsxDEV","formatDate","dateString","date","Date","toLocaleString","MovieDetails","_s","movies","setMovies","loading","setLoading","isFetch","setIsFetch","characterInfo","setCharacterInfo","handleMovies","response","fetch","data","json","results","error","console","fetchSpeciesInfo","speciesUrls","speciesResponses","Promise","all","map","url","then","speciesNames","species","name","fetchCharacterInfo","characterUrls","characterResponses","characterNames","character","fetchAndSetCharacterInfo","names","prev","forEach","movie","characters","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","result","movieInfo","find","title","episode_id","index","created","edited","to","target","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/Movie/MovieDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MoviePage.css';\r\nimport MovieImage from './MovieImage';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst formatDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleString(); // Adjust this to your preferred date format\r\n};\r\n\r\nconst MovieDetails = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFetch, setIsFetch] = useState(true);\r\n  const [characterInfo, setCharacterInfo] = useState({});\r\n\r\n  const handleMovies = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setIsFetch(false);\r\n\r\n      const response = await fetch('https://swapi.dev/api/films/');\r\n      const data = await response.json();\r\n\r\n      setMovies(data.results);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching movies:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isFetch) {\r\n      handleMovies();\r\n    }\r\n  }, [isFetch]);\r\n\r\n  const fetchSpeciesInfo = async (speciesUrls) => {\r\n    try {\r\n      const speciesResponses = await Promise.all(\r\n        speciesUrls.map((url) => fetch(url).then((response) => response.json()))\r\n      );\r\n  \r\n      const speciesNames = speciesResponses.map((species) => species.name);\r\n      return speciesNames;\r\n    } catch (error) {\r\n      console.error('Error fetching species information:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchCharacterInfo = async (characterUrls) => {\r\n    try {\r\n      const characterResponses = await Promise.all(\r\n        characterUrls.map((url) => fetch(url).then((response) => response.json()))\r\n      );\r\n\r\n      const characterNames = characterResponses.map((character) => character.name);\r\n      return characterNames;\r\n    } catch (error) {\r\n      console.error('Error fetching character information:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchAndSetCharacterInfo = async (characterUrls, speciesUrls) => {\r\n    const names = await fetchCharacterInfo(characterUrls);\r\n    const species = await fetchSpeciesInfo(speciesUrls);\r\n    setCharacterInfo((prev) => ({ ...prev, [characterUrls]: {names:names, species:species }}));\r\n  };\r\n\r\n  useEffect(() => {\r\n    movies.forEach((movie) => {\r\n      fetchAndSetCharacterInfo(movie.characters);\r\n    });\r\n  }, [movies]);\r\n\r\n  return (\r\n    <div className='moviepage-container'>\r\n      {isFetch && <button onClick={handleMovies}>Motion Picture</button>}\r\n      <div className='movies-container'>\r\n        {movies.map((result) => {\r\n          const movieInfo = MovieImage.find((movie) => movie.title === result.title);\r\n\r\n          return (\r\n            <div className='movie-items' key={result.title}>\r\n              <h4>Star Wars</h4>\r\n              <h4>{result.title} Episode {result.episode_id}</h4>\r\n              {/* <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} /> */}\r\n              <div>\r\n                <h5>Characters:</h5>\r\n                {characterInfo[result.characters] ? (\r\n                  <ul>\r\n                    {characterInfo[result.characters].map((character, index) => (\r\n                        <li key={index}>{character}- {characterInfo[result.characters].species[index]}</li>\r\n                    ))}\r\n                  </ul>\r\n                ) : (\r\n                  <p>Loading characters...</p>\r\n                )}\r\n              </div>\r\n              <div>Created: {formatDate(result.created)}</div>\r\n              <div>Edited: {formatDate(result.edited)}</div>\r\n              <div>URL: <Link to={result.url} target= '_blank'>{result.url}</Link></div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        {/**\r\n         * species[]\r\n         * Planets[]\r\n         * vehicles[]\r\n         * starships[]\r\n         */}\r\n      </div>\r\n      {loading && <div className='loading-bar'>Loading...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}