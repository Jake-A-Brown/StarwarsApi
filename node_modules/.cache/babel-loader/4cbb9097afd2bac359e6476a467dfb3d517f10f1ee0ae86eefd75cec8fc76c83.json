{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\components\\\\Planets\\\\Planet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport style from './Planet.module.css';\nimport PlanetImage from './PlanetImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planet = props => {\n  _s();\n  const [residentNames, setResidentNames] = useState([]);\n  const [filmTitles, setFilmTitles] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleString(); // You can customize the format as needed\n  };\n\n  useEffect(() => {\n    var _PlanetImage$find;\n    // Fetch resident names\n    const fetchResidentNames = async () => {\n      const names = await Promise.all(props.residents.map(async residentUrl => {\n        const response = await fetch(residentUrl);\n        const data = await response.json();\n        return data.name;\n      }));\n      setResidentNames(names);\n    };\n\n    // Fetch film titles\n    const fetchFilmTitles = async () => {\n      const titles = await Promise.all(props.films.map(async filmUrl => {\n        const response = await fetch(filmUrl);\n        const data = await response.json();\n        return data.title;\n      }));\n      setFilmTitles(titles);\n    };\n    const planetDescription = ((_PlanetImage$find = PlanetImage.find(planet => planet.name === props.id)) === null || _PlanetImage$find === void 0 ? void 0 : _PlanetImage$find.description) || \"\";\n    fetchResidentNames();\n    fetchFilmTitles();\n    setDescription(planetDescription);\n  }, [props.residents, props.films, props.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.planet,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Planet: \", props.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.imageSrc // Use the imageSrc property from planet data\n      ,\n      alt: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"description: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Climate: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.climate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Terrain: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.terrain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Population: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.population\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Diameter: \", props.diameter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gravity: \", props.gravity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rotation Period: \", props.rotationPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Orbital Period: \", props.orbitalPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Surface Water: \", props.surfaceWater]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Residents: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: residentNames.join(', ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Films: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: filmTitles.join(', ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created: \", formatTimestamp(props.created)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Edited: \", formatTimestamp(props.edited)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"URL: \", props.url]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Planet, \"REKHJCZG+Q+tlfOwexzaR8POleo=\");\n_c = Planet;\nexport default Planet;\nvar _c;\n$RefreshReg$(_c, \"Planet\");","map":{"version":3,"names":["React","useEffect","useState","style","PlanetImage","jsxDEV","_jsxDEV","Planet","props","_s","residentNames","setResidentNames","filmTitles","setFilmTitles","description","setDescription","formatTimestamp","timestamp","date","Date","toLocaleString","_PlanetImage$find","fetchResidentNames","names","Promise","all","residents","map","residentUrl","response","fetch","data","json","name","fetchFilmTitles","titles","films","filmUrl","title","planetDescription","find","planet","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","imageSrc","alt","climate","terrain","population","diameter","gravity","rotationPeriod","orbitalPeriod","surfaceWater","join","created","edited","url","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/components/Planets/Planet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport style from './Planet.module.css';\r\nimport PlanetImage from './PlanetImage';\r\n\r\nconst Planet = (props) => {\r\n  const [residentNames, setResidentNames] = useState([]);\r\n  const [filmTitles, setFilmTitles] = useState([]);\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString(); // You can customize the format as needed\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch resident names\r\n    const fetchResidentNames = async () => {\r\n      const names = await Promise.all(props.residents.map(async (residentUrl) => {\r\n        const response = await fetch(residentUrl);\r\n        const data = await response.json();\r\n        return data.name;\r\n      }));\r\n      setResidentNames(names);\r\n    };\r\n\r\n    // Fetch film titles\r\n    const fetchFilmTitles = async () => {\r\n      const titles = await Promise.all(props.films.map(async (filmUrl) => {\r\n        const response = await fetch(filmUrl);\r\n        const data = await response.json();\r\n        return data.title;\r\n      }));\r\n      setFilmTitles(titles);\r\n    };\r\n\r\n    const planetDescription = PlanetImage.find((planet) => planet.name === props.id)?.description || \"\";\r\n\r\n    fetchResidentNames();\r\n    fetchFilmTitles();\r\n    setDescription(planetDescription);\r\n  }, [props.residents, props.films, props.id]);\r\n\r\n  return (\r\n    <div className={style.planet}>\r\n      <h4>Planet: {props.id}</h4>\r\n      <img\r\n              src={props.imageSrc} // Use the imageSrc property from planet data\r\n              alt={props.id}\r\n            />\r\n            <div>description: <p>{description}</p></div>\r\n      <h3>Climate: <p>{props.climate}</p></h3>\r\n      <h3>Terrain: <p>{props.terrain}</p></h3>\r\n      <div>Population: <p>{props.population}</p></div>\r\n      <p>Diameter: {props.diameter}</p>\r\n      <p>Gravity: {props.gravity}</p>\r\n      <p>Rotation Period: {props.rotationPeriod}</p>\r\n      <p>Orbital Period: {props.orbitalPeriod}</p>\r\n      <p>Surface Water: {props.surfaceWater}</p>\r\n      <div>Residents: <p>{residentNames.join(', ')}</p></div>\r\n      <div>Films: <p>{filmTitles.join(', ')}</p></div>\r\n      <p>Created: {formatTimestamp(props.created)}</p>\r\n      <p>Edited: {formatTimestamp(props.edited)}</p>\r\n      <p>URL: {props.url}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}