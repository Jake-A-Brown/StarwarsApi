{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\01-starting-project\\\\01-starting-project\\\\src\\\\pages\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\n// import React, {useEffect, useState, useCallback} from \"react\";\n\n// import PlanetList from \"../components/PlanetList\";\n\n// const PlanetPage = () => {\n//     const [planets, setPlanets] = useState([]);\n\n//     const fetchPlanetsHandler = useCallback(async () => {\n//         const response = await fetch('https://swapi.dev/api/planets');\n//         const data = await response.json();\n\n//         const transformedPlanets = data.results.map((planetData) =>{\n//           return{\n//             id: planetData.name,\n//             climate: planetData.climate,\n//             terrain: planetData.terrain,\n//             pops: planetData.population,\n//           }\n//         });\n//         setPlanets(transformedPlanets);\n//       },[]);\n\n//       useEffect(() => {\n\n//         fetchPlanetsHandler();\n//       }, [fetchPlanetsHandler]);\n\n//   return (\n//     <React.Fragment>\n//       <section>\n//       <button onClick={fetchPlanetsHandler}>Fetch planets</button>\n//       </section>\n//       <section>\n//       <PlanetList planets={planets}/>\n//       </section>\n//     </React.Fragment>\n//   );\n// };\n\n// export default PlanetPage;\n\nimport React, { useState, useCallback } from \"react\";\nimport PlanetList from \"../components/PlanetList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetPage = () => {\n  _s();\n  const [planets, setPlanets] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\n  const planetsPerPage = 10;\n  const fetchPlanetsHandler = useCallback(async url => {\n    const response = await fetch(url);\n    const data = await response.json();\n    const transformedPlanets = data.results.map(planetData => {\n      return {\n        id: planetData.name,\n        climate: planetData.climate,\n        terrain: planetData.terrain,\n        population: planetData.population,\n        diameter: planetData.diameter,\n        gravity: planetData.gravity,\n        rotationPeriod: planetData.rotation_period,\n        orbitalPeriod: planetData.orbital_period,\n        surfaceWater: planetData.surface_water,\n        residents: planetData.residents,\n        films: planetData.films,\n        created: planetData.created,\n        edited: planetData.edited,\n        url: planetData.url\n      };\n    });\n    setPlanets(transformedPlanets);\n    setNextPageUrl(data.next);\n    setPreviousPageUrl(data.previous);\n  }, []);\n  const nextPageHandler = () => {\n    if (nextPageUrl) {\n      setCurrentPage(prevPage => prevPage + 1);\n      fetchPlanetsHandler(nextPageUrl);\n    }\n  };\n  const backPageHandler = () => {\n    if (previousPageUrl) {\n      setCurrentPage(prevPage => prevPage - 1);\n      fetchPlanetsHandler(previousPageUrl);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Page \", currentPage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(PlanetList, {\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetPage, \"ip/slhr92dzuu2NWrtVp4Qu+Qto=\");\n_c = PlanetPage;\nexport default PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["React","useState","useCallback","PlanetList","jsxDEV","_jsxDEV","PlanetPage","_s","planets","setPlanets","currentPage","setCurrentPage","nextPageUrl","setNextPageUrl","previousPageUrl","setPreviousPageUrl","planetsPerPage","fetchPlanetsHandler","url","response","fetch","data","json","transformedPlanets","results","map","planetData","id","name","climate","terrain","population","diameter","gravity","rotationPeriod","rotation_period","orbitalPeriod","orbital_period","surfaceWater","surface_water","residents","films","created","edited","next","previous","nextPageHandler","prevPage","backPageHandler","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/01-starting-project/01-starting-project/src/pages/PlanetPage.js"],"sourcesContent":["// import React, {useEffect, useState, useCallback} from \"react\";\r\n\r\n// import PlanetList from \"../components/PlanetList\";\r\n\r\n\r\n// const PlanetPage = () => {\r\n//     const [planets, setPlanets] = useState([]);\r\n\r\n//     const fetchPlanetsHandler = useCallback(async () => {\r\n//         const response = await fetch('https://swapi.dev/api/planets');\r\n//         const data = await response.json();\r\n    \r\n//         const transformedPlanets = data.results.map((planetData) =>{\r\n//           return{\r\n//             id: planetData.name,\r\n//             climate: planetData.climate,\r\n//             terrain: planetData.terrain,\r\n//             pops: planetData.population,\r\n//           }\r\n//         });\r\n//         setPlanets(transformedPlanets);\r\n//       },[]);\r\n    \r\n//       useEffect(() => {\r\n        \r\n//         fetchPlanetsHandler();\r\n//       }, [fetchPlanetsHandler]);\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <section>\r\n//       <button onClick={fetchPlanetsHandler}>Fetch planets</button>\r\n//       </section>\r\n//       <section>\r\n//       <PlanetList planets={planets}/>\r\n//       </section>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default PlanetPage;\r\n\r\nimport React, { useState, useCallback } from \"react\";\r\nimport PlanetList from \"../components/PlanetList\";\r\n\r\nconst PlanetPage = () => {\r\n  const [planets, setPlanets] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/planets');\r\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\r\n\r\n  const planetsPerPage = 10;\r\n\r\n  const fetchPlanetsHandler = useCallback(async (url) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    const transformedPlanets = data.results.map((planetData) => {\r\n      return {\r\n        id: planetData.name,\r\n        climate: planetData.climate,\r\n        terrain: planetData.terrain,\r\n        population: planetData.population,\r\n        diameter: planetData.diameter,\r\n        gravity: planetData.gravity,\r\n        rotationPeriod: planetData.rotation_period,\r\n        orbitalPeriod: planetData.orbital_period,\r\n        surfaceWater: planetData.surface_water,\r\n        residents: planetData.residents,\r\n        films: planetData.films,\r\n        created: planetData.created,\r\n        edited: planetData.edited,\r\n        url: planetData.url,\r\n      };\r\n    });\r\n\r\n    setPlanets(transformedPlanets);\r\n    setNextPageUrl(data.next);\r\n    setPreviousPageUrl(data.previous);\r\n  }, []);\r\n\r\n  const nextPageHandler = () => {\r\n    if (nextPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n      fetchPlanetsHandler(nextPageUrl);\r\n    }\r\n  };\r\n\r\n  const backPageHandler = () => {\r\n    if (previousPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n      fetchPlanetsHandler(previousPageUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n      <h2>Page {currentPage}</h2>\r\n      </section>\r\n      <section>\r\n      <button onClick={backPageHandler} disabled={!previousPageUrl}>Back</button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next</button>\r\n      </section>\r\n      <section>\r\n        <PlanetList planets={planets} />\r\n      </section>\r\n      <section>\r\n      <button onClick={backPageHandler} disabled={!previousPageUrl}>Back</button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next</button>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlanetPage;\r\n\r\n\r\n"],"mappings":";;AAAA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,+BAA+B,CAAC;EAC/E,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMe,cAAc,GAAG,EAAE;EAEzB,MAAMC,mBAAmB,GAAGf,WAAW,CAAC,MAAOgB,GAAG,IAAK;IACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,MAAMC,kBAAkB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,UAAU,IAAK;MAC1D,OAAO;QACLC,EAAE,EAAED,UAAU,CAACE,IAAI;QACnBC,OAAO,EAAEH,UAAU,CAACG,OAAO;QAC3BC,OAAO,EAAEJ,UAAU,CAACI,OAAO;QAC3BC,UAAU,EAAEL,UAAU,CAACK,UAAU;QACjCC,QAAQ,EAAEN,UAAU,CAACM,QAAQ;QAC7BC,OAAO,EAAEP,UAAU,CAACO,OAAO;QAC3BC,cAAc,EAAER,UAAU,CAACS,eAAe;QAC1CC,aAAa,EAAEV,UAAU,CAACW,cAAc;QACxCC,YAAY,EAAEZ,UAAU,CAACa,aAAa;QACtCC,SAAS,EAAEd,UAAU,CAACc,SAAS;QAC/BC,KAAK,EAAEf,UAAU,CAACe,KAAK;QACvBC,OAAO,EAAEhB,UAAU,CAACgB,OAAO;QAC3BC,MAAM,EAAEjB,UAAU,CAACiB,MAAM;QACzBzB,GAAG,EAAEQ,UAAU,CAACR;MAClB,CAAC;IACH,CAAC,CAAC;IAEFT,UAAU,CAACc,kBAAkB,CAAC;IAC9BV,cAAc,CAACQ,IAAI,CAACuB,IAAI,CAAC;IACzB7B,kBAAkB,CAACM,IAAI,CAACwB,QAAQ,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIlC,WAAW,EAAE;MACfD,cAAc,CAAEoC,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;MAC1C9B,mBAAmB,CAACL,WAAW,CAAC;IAClC;EACF,CAAC;EAED,MAAMoC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIlC,eAAe,EAAE;MACnBH,cAAc,CAAEoC,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;MAC1C9B,mBAAmB,CAACH,eAAe,CAAC;IACtC;EACF,CAAC;EAED,oBACET,OAAA,CAACL,KAAK,CAACiD,QAAQ;IAAAC,QAAA,gBACb7C,OAAA;MAAA6C,QAAA,eACA7C,OAAA;QAAA6C,QAAA,GAAI,OAAK,EAACxC,WAAW;MAAA;QAAAyC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eACVjD,OAAA;MAAA6C,QAAA,gBACA7C,OAAA;QAAQkD,OAAO,EAAEP,eAAgB;QAACQ,QAAQ,EAAE,CAAC1C,eAAgB;QAAAoC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzEjD,OAAA;QAAQkD,OAAO,EAAET,eAAgB;QAACU,QAAQ,EAAE,CAAC5C,WAAY;QAAAsC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,eACVjD,OAAA;MAAA6C,QAAA,eACE7C,OAAA,CAACF,UAAU;QAACK,OAAO,EAAEA;MAAQ;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACVjD,OAAA;MAAA6C,QAAA,gBACA7C,OAAA;QAAQkD,OAAO,EAAEP,eAAgB;QAACQ,QAAQ,EAAE,CAAC1C,eAAgB;QAAAoC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzEjD,OAAA;QAAQkD,OAAO,EAAET,eAAgB;QAACU,QAAQ,EAAE,CAAC5C,WAAY;QAAAsC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAErB,CAAC;AAAC/C,EAAA,CApEID,UAAU;AAAAmD,EAAA,GAAVnD,UAAU;AAsEhB,eAAeA,UAAU;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}