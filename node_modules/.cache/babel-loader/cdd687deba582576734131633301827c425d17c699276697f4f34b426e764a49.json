{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\components\\\\Planets\\\\Planet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport style from './Planet.module.css';\nimport PlanetImage from './PlanetImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planet = props => {\n  _s();\n  var _PlanetImage$find;\n  const [planetData, setPlanetData] = useState({\n    residents: [],\n    films: []\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleString(); // You can customize the format as needed\n  };\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Fetch resident names\n      const residentNames = await Promise.all(props.residents.map(async residentUrl => {\n        const response = await fetch(residentUrl);\n        const data = await response.json();\n        return data.name;\n      }));\n\n      // Fetch film titles\n      const filmTitles = await Promise.all(props.films.map(async filmUrl => {\n        const response = await fetch(filmUrl);\n        const data = await response.json();\n        return data.title;\n      }));\n      setPlanetData({\n        residents: residentNames,\n        films: filmTitles\n      });\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [props.residents, props.films, props.fetchData]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n  const planetDescription = ((_PlanetImage$find = PlanetImage.find(planet => planet.name === props.id)) === null || _PlanetImage$find === void 0 ? void 0 : _PlanetImage$find.description) || \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.planet,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Planet: \", props.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.imageSrc // Use the imageSrc property from planet data\n      ,\n      alt: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Description: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: planetDescription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Climate: \", props.climate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Terrain: \", props.terrain]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Population: \", props.population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Diameter: \", props.diameter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gravity: \", props.gravity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rotation Period: \", props.rotationPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Orbital Period: \", props.orbitalPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Surface Water: \", props.surfaceWater]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Residents:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: planetData.residents.map((resident, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: resident\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Films:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: planetData.films.map((film, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: film\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created: \", formatTimestamp(props.created)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Edited: \", formatTimestamp(props.edited)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"URL: \", props.url]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Planet, \"lKrzVQh6Oj0Z+kDnu0QsJ0k/nKg=\");\n_c = Planet;\nexport default Planet;\nvar _c;\n$RefreshReg$(_c, \"Planet\");","map":{"version":3,"names":["React","useEffect","useState","style","PlanetImage","jsxDEV","_jsxDEV","Planet","props","_s","_PlanetImage$find","planetData","setPlanetData","residents","films","isLoading","setIsLoading","error","setError","formatTimestamp","timestamp","date","Date","toLocaleString","fetchData","residentNames","Promise","all","map","residentUrl","response","fetch","data","json","name","filmTitles","filmUrl","title","message","children","fileName","_jsxFileName","lineNumber","columnNumber","planetDescription","find","planet","id","description","className","src","imageSrc","alt","climate","terrain","population","diameter","gravity","rotationPeriod","orbitalPeriod","surfaceWater","resident","index","film","created","edited","url","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/components/Planets/Planet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport style from './Planet.module.css';\r\nimport PlanetImage from './PlanetImage';\r\n\r\nconst Planet = (props) => {\r\n  const [planetData, setPlanetData] = useState({\r\n    residents: [],\r\n    films: [],\r\n  });\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString(); // You can customize the format as needed\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Fetch resident names\r\n      const residentNames = await Promise.all(props.residents.map(async (residentUrl) => {\r\n        const response = await fetch(residentUrl);\r\n        const data = await response.json();\r\n        return data.name;\r\n      }));\r\n\r\n      // Fetch film titles\r\n      const filmTitles = await Promise.all(props.films.map(async (filmUrl) => {\r\n        const response = await fetch(filmUrl);\r\n        const data = await response.json();\r\n        return data.title;\r\n      }));\r\n\r\n      setPlanetData({\r\n        residents: residentNames,\r\n        films: filmTitles,\r\n      });\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [props.residents, props.films, props.fetchData]);\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  const planetDescription = PlanetImage.find((planet) => planet.name === props.id)?.description || \"\";\r\n\r\n  return (\r\n    <div className={style.planet}>\r\n      <h4>Planet: {props.id}</h4>\r\n      <img\r\n        src={props.imageSrc} // Use the imageSrc property from planet data\r\n        alt={props.id}\r\n      />\r\n      <div>Description: <p>{planetDescription}</p></div>\r\n      <p>Climate: {props.climate}</p>\r\n      <p>Terrain: {props.terrain}</p>\r\n      <p>Population: {props.population}</p>\r\n      <p>Diameter: {props.diameter}</p>\r\n      <p>Gravity: {props.gravity}</p>\r\n      <p>Rotation Period: {props.rotationPeriod}</p>\r\n      <p>Orbital Period: {props.orbitalPeriod}</p>\r\n      <p>Surface Water: {props.surfaceWater}</p>\r\n      <div>Residents:</div>\r\n<ul>\r\n  {planetData.residents.map((resident, index) => (\r\n    <li key={index}>{resident}</li>\r\n  ))}\r\n</ul>\r\n\r\n<div>Films:</div>\r\n<ul>\r\n  {planetData.films.map((film, index) => (\r\n    <li key={index}>{film}</li>\r\n  ))}\r\n</ul>\r\n      {/* <div>Residents: <p>{planetData.residents.join(', ')}</p></div>\r\n      <div>Films: <p>{planetData.films.join(', ')}</p></div> */}\r\n      <p>Created: {formatTimestamp(props.created)}</p>\r\n      <p>Edited: {formatTimestamp(props.edited)}</p>\r\n      <p>URL: {props.url}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}