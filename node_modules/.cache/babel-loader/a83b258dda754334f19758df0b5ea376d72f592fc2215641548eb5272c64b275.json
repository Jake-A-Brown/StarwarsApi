{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\MoviePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport MovieList from '../components/Movies/MoviesList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoviePage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/films');\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\n  const fetchMoviesHandler = useCallback(async url => {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const contentType = response.headers.get(\"content-type\");\n      if (contentType && contentType.includes(\"application/json\")) {\n        const data = await response.json();\n\n        // Process the JSON data as before\n        const transformedMovies = data.results.map(movieData => {\n          return {\n            title: movieData.title,\n            id: movieData.episode_id,\n            openingText: movieData.opening_crawl,\n            director: movieData.director,\n            producer: movieData.producer,\n            releaseDate: movieData.release_date,\n            // characters: movieData.characters,\n            // planets: movieData.planets,\n            // starships: movieData.starships,\n            // vehicles: movieData.vehicles,\n            // species: movieData.species,\n            created: movieData.created,\n            edited: movieData.edited,\n            url: movieData.url\n          };\n        });\n        setMovies(transformedMovies);\n        setNextPageUrl(data.next);\n        setPreviousPageUrl(data.previous);\n      } else {\n        throw new Error(\"Response is not valid JSON\");\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Handle the error, e.g., display an error message to the user\n    }\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  const nextPageHandler = () => {\n    if (nextPageUrl) {\n      setCurrentPage(prevPage => prevPage + 1);\n      fetchMoviesHandler(nextPageUrl);\n    }\n  };\n  const backPageHandler = () => {\n    if (previousPageUrl) {\n      setCurrentPage(prevPage => prevPage - 1);\n      fetchMoviesHandler(previousPageUrl);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Page \", currentPage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backPageHandler,\n        disabled: !previousPageUrl,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPageHandler,\n        disabled: !nextPageUrl,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(MoviePage, \"4ETbBWcLGGXR7ElIVtxz94HFCnk=\");\n_c = MoviePage;\nexport default MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","MovieList","jsxDEV","_jsxDEV","MoviePage","_s","movies","setMovies","currentPage","setCurrentPage","nextPageUrl","setNextPageUrl","previousPageUrl","setPreviousPageUrl","fetchMoviesHandler","url","response","fetch","ok","Error","status","contentType","headers","get","includes","data","json","transformedMovies","results","map","movieData","title","id","episode_id","openingText","opening_crawl","director","producer","releaseDate","release_date","created","edited","next","previous","error","console","nextPageHandler","prevPage","backPageHandler","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/MoviePage.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport MovieList from '../components/Movies/MoviesList';\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [nextPageUrl, setNextPageUrl] = useState('https://swapi.dev/api/films');\r\n  const [previousPageUrl, setPreviousPageUrl] = useState('');\r\n\r\n  const fetchMoviesHandler = useCallback(async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n  \r\n      const contentType = response.headers.get(\"content-type\");\r\n  \r\n      if (contentType && contentType.includes(\"application/json\")) {\r\n        const data = await response.json();\r\n  \r\n        // Process the JSON data as before\r\n        const transformedMovies = data.results.map((movieData) => {\r\n          return {\r\n            title: movieData.title,\r\n            id: movieData.episode_id,\r\n            openingText: movieData.opening_crawl,\r\n            director: movieData.director,\r\n            producer: movieData.producer,\r\n            releaseDate: movieData.release_date,\r\n            // characters: movieData.characters,\r\n            // planets: movieData.planets,\r\n            // starships: movieData.starships,\r\n            // vehicles: movieData.vehicles,\r\n            // species: movieData.species,\r\n            created: movieData.created,\r\n            edited: movieData.edited,\r\n            url: movieData.url,\r\n          };\r\n        });\r\n  \r\n        setMovies(transformedMovies);\r\n        setNextPageUrl(data.next);\r\n        setPreviousPageUrl(data.previous);\r\n      } else {\r\n        throw new Error(\"Response is not valid JSON\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      // Handle the error, e.g., display an error message to the user\r\n    }\r\n  }, []);\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchMoviesHandler();\r\n  }, [fetchMoviesHandler]);\r\n\r\n  const nextPageHandler = () => {\r\n    if (nextPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n      fetchMoviesHandler(nextPageUrl);\r\n    }\r\n  };\r\n\r\n  const backPageHandler = () => {\r\n    if (previousPageUrl) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n      fetchMoviesHandler(previousPageUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <h4>Page {currentPage}</h4>\r\n        <button onClick={backPageHandler} disabled={!previousPageUrl}>Back</button>\r\n        <button onClick={nextPageHandler} disabled={!nextPageUrl}>Next</button>\r\n        <MovieList movies={movies} />\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}