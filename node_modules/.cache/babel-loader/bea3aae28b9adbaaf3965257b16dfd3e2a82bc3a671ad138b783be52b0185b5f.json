{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\pages\\\\Movie\\\\MoviePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './MoviePage.css';\nimport MovieImage from './MovieImage';\nimport Loader from '../../components/Loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoviePage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isFetch, setIsFetch] = useState(true);\n  const handleMovies = async () => {\n    try {\n      setLoading(true);\n      setIsFetch(false);\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n      setMovies(data.results);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  const fetchCharacterDetails = async characterURLs => {\n    const characterPromises = characterURLs.map(async url => {\n      const response = await fetch(url);\n      return response.json();\n    });\n    return Promise.all(characterPromises);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviepage-container\",\n    children: [isFetch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMovies,\n      children: \"Motion Picture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: movies.map(result => {\n        const movieInfo = MovieImage.find(movie => movie.title === result.title);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-items\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Star Wars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [result.title, \" Episode \", result.episode_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: movieInfo ? movieInfo.movieImageSrc : '',\n            alt: result.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Release Date: \", result.release_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Director: \", result.director]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Producer: \", result.producer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: result.opening_crawl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Characters:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), result.characters && /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: fetchCharacterDetails(result.characters).then(characters => characters.map(character => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: character.name\n            }, character.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 23\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)]\n        }, result.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-bar\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(MoviePage, \"LF/Z1SxtRPacNSfYnfPp/VT68AY=\");\n_c = MoviePage;\nexport default MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useState","MovieImage","Loader","jsxDEV","_jsxDEV","MoviePage","_s","movies","setMovies","loading","setLoading","isFetch","setIsFetch","handleMovies","response","fetch","data","json","results","error","console","fetchCharacterDetails","characterURLs","characterPromises","map","url","Promise","all","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","result","movieInfo","find","movie","title","episode_id","src","movieImageSrc","alt","release_date","director","producer","opening_crawl","characters","then","character","name","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/pages/Movie/MoviePage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './MoviePage.css';\r\nimport MovieImage from './MovieImage';\r\nimport Loader from '../../components/Loader/Loader';\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFetch, setIsFetch] = useState(true);\r\n\r\n  const handleMovies = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setIsFetch(false);\r\n\r\n      const response = await fetch('https://swapi.dev/api/films/');\r\n      const data = await response.json();\r\n\r\n      setMovies(data.results);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching movies:', error);\r\n    }\r\n  };\r\n\r\n  const fetchCharacterDetails = async (characterURLs) => {\r\n    const characterPromises = characterURLs.map(async (url) => {\r\n      const response = await fetch(url);\r\n      return response.json();\r\n    });\r\n\r\n    return Promise.all(characterPromises);\r\n  };\r\n\r\n  return (\r\n    <div className='moviepage-container'>\r\n      {isFetch && <button onClick={handleMovies}>Motion Picture</button>}\r\n\r\n      <div className='movies-container'>\r\n        {movies.map((result) => {\r\n          const movieInfo = MovieImage.find((movie) => movie.title === result.title);\r\n\r\n          return (\r\n            <div className='movie-items' key={result.title}>\r\n              <h4>Star Wars</h4>\r\n              <h4>\r\n                {result.title} Episode {result.episode_id}\r\n              </h4>\r\n              <img src={movieInfo ? movieInfo.movieImageSrc : ''} alt={result.title} />\r\n              <div>Release Date: {result.release_date}</div>\r\n              <div>Director: {result.director}</div>\r\n              <div>Producer: {result.producer}</div>\r\n              <p>{result.opening_crawl}</p>\r\n\r\n              <h5>Characters:</h5>\r\n              {result.characters && (\r\n                <ul>\r\n                  {fetchCharacterDetails(result.characters).then((characters) =>\r\n                    characters.map((character) => (\r\n                      <li key={character.name}>{character.name}</li>\r\n                    ))\r\n                  )}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <div>\r\n        {/**\r\n         * Additional information about species, planets, vehicles, and starships can be fetched and displayed here.\r\n         */}\r\n      </div>\r\n\r\n      {loading && <div className='loading-bar'><Loader /></div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iBAAiB;AACxB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChBE,UAAU,CAAC,KAAK,CAAC;MAEjB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAC5D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElCT,SAAS,CAACQ,IAAI,CAACE,OAAO,CAAC;MACvBR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAME,qBAAqB,GAAG,MAAOC,aAAa,IAAK;IACrD,MAAMC,iBAAiB,GAAGD,aAAa,CAACE,GAAG,CAAC,MAAOC,GAAG,IAAK;MACzD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACU,GAAG,CAAC;MACjC,OAAOX,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC;IAEF,OAAOS,OAAO,CAACC,GAAG,CAACJ,iBAAiB,CAAC;EACvC,CAAC;EAED,oBACEnB,OAAA;IAAKwB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,GACjClB,OAAO,iBAAIP,OAAA;MAAQ0B,OAAO,EAAEjB,YAAa;MAAAgB,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAElE9B,OAAA;MAAKwB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BtB,MAAM,CAACiB,GAAG,CAAEW,MAAM,IAAK;QACtB,MAAMC,SAAS,GAAGnC,UAAU,CAACoC,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAKJ,MAAM,CAACI,KAAK,CAAC;QAE1E,oBACEnC,OAAA;UAAKwB,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BzB,OAAA;YAAAyB,QAAA,EAAI;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClB9B,OAAA;YAAAyB,QAAA,GACGM,MAAM,CAACI,KAAK,EAAC,WAAS,EAACJ,MAAM,CAACK,UAAU;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC,CAAC,eACL9B,OAAA;YAAKqC,GAAG,EAAEL,SAAS,GAAGA,SAAS,CAACM,aAAa,GAAG,EAAG;YAACC,GAAG,EAAER,MAAM,CAACI;UAAM;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzE9B,OAAA;YAAAyB,QAAA,GAAK,gBAAc,EAACM,MAAM,CAACS,YAAY;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC9C9B,OAAA;YAAAyB,QAAA,GAAK,YAAU,EAACM,MAAM,CAACU,QAAQ;UAAA;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACtC9B,OAAA;YAAAyB,QAAA,GAAK,YAAU,EAACM,MAAM,CAACW,QAAQ;UAAA;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACtC9B,OAAA;YAAAyB,QAAA,EAAIM,MAAM,CAACY;UAAa;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAE7B9B,OAAA;YAAAyB,QAAA,EAAI;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACnBC,MAAM,CAACa,UAAU,iBAChB5C,OAAA;YAAAyB,QAAA,EACGR,qBAAqB,CAACc,MAAM,CAACa,UAAU,CAAC,CAACC,IAAI,CAAED,UAAU,IACxDA,UAAU,CAACxB,GAAG,CAAE0B,SAAS,iBACvB9C,OAAA;cAAAyB,QAAA,EAA0BqB,SAAS,CAACC;YAAI,GAA/BD,SAAS,CAACC,IAAI;cAAApB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAsB,CAC9C,CACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CACL;QAAA,GApB+BC,MAAM,CAACI,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAqBzC,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN9B,OAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIK,CAAC,EAELzB,OAAO,iBAAIL,OAAA;MAAKwB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAACzB,OAAA,CAACF,MAAM;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAzEID,SAAS;AAAA+C,EAAA,GAAT/C,SAAS;AA2Ef,eAAeA,SAAS;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}