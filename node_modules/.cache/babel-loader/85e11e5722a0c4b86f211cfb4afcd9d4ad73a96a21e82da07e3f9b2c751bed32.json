{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loucr\\\\OneDrive\\\\Desktop\\\\React-Projects\\\\StarWarsApi\\\\starwars\\\\src\\\\components\\\\Planets\\\\Planet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport style from './Planet.module.css';\nimport PlanetImage from './PlanetImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planet = props => {\n  _s();\n  var _PlanetImage$find;\n  // const [planetData, setPlanetData] = useState({\n  //   residents: [],\n  //   films: [],\n  // });\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleString(); // You can customize the format as needed\n  };\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [props.residents, props.films]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  const planetDescription = ((_PlanetImage$find = PlanetImage.find(planet => planet.name === props.id)) === null || _PlanetImage$find === void 0 ? void 0 : _PlanetImage$find.description) || \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.planet,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Planet: \", props.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.imageSrc // Use the imageSrc property from planet data\n      ,\n      alt: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Description: \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: planetDescription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Climate: \", props.climate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Terrain: \", props.terrain]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Population: \", props.population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Diameter: \", props.diameter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gravity: \", props.gravity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rotation Period: \", props.rotationPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Orbital Period: \", props.orbitalPeriod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Surface Water: \", props.surfaceWater]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Residents:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created: \", formatTimestamp(props.created)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Edited: \", formatTimestamp(props.edited)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"URL: \", props.url]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Planet, \"LlSJQr/t1EKxFB4IYdFcxShFx20=\");\n_c = Planet;\nexport default Planet;\n\n// Fetch resident names\n// const residentNames = await Promise.all(props.residents.map(async (residentUrl) => {\n//   const response = await fetch(residentUrl);\n//   const data = await response.json();\n//   return data.name;\n// }));\n\n// Fetch film titles\n// const filmTitles = await Promise.all(props.films.map(async (filmUrl) => {\n//   const response = await fetch(filmUrl);\n//   const data = await response.json();\n//   return data.title;\n// }));\n\n// setPlanetData({\n//   residents: residentNames,\n//   films: filmTitles,\n// });\nvar _c;\n$RefreshReg$(_c, \"Planet\");","map":{"version":3,"names":["React","useEffect","useState","style","PlanetImage","jsxDEV","_jsxDEV","Planet","props","_s","_PlanetImage$find","isLoading","setIsLoading","error","setError","formatTimestamp","timestamp","date","Date","toLocaleString","fetchData","message","residents","films","children","fileName","_jsxFileName","lineNumber","columnNumber","planetDescription","find","planet","name","id","description","className","src","imageSrc","alt","climate","terrain","population","diameter","gravity","rotationPeriod","orbitalPeriod","surfaceWater","created","edited","url","_c","$RefreshReg$"],"sources":["C:/Users/loucr/OneDrive/Desktop/React-Projects/StarWarsApi/starwars/src/components/Planets/Planet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport style from './Planet.module.css';\r\nimport PlanetImage from './PlanetImage';\r\n\r\nconst Planet = (props) => {\r\n  // const [planetData, setPlanetData] = useState({\r\n  //   residents: [],\r\n  //   films: [],\r\n  // });\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString(); // You can customize the format as needed\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [props.residents, props.films]);\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  const planetDescription = PlanetImage.find((planet) => planet.name === props.id)?.description || \"\";\r\n\r\n  return (\r\n    <div className={style.planet}>\r\n      <h4>Planet: {props.id}</h4>\r\n      <img\r\n        src={props.imageSrc} // Use the imageSrc property from planet data\r\n        alt={props.id}\r\n      />\r\n      <div>Description: <p>{planetDescription}</p></div>\r\n      <p>Climate: {props.climate}</p>\r\n      <p>Terrain: {props.terrain}</p>\r\n      <p>Population: {props.population}</p>\r\n      <p>Diameter: {props.diameter}</p>\r\n      <p>Gravity: {props.gravity}</p>\r\n      <p>Rotation Period: {props.rotationPeriod}</p>\r\n      <p>Orbital Period: {props.orbitalPeriod}</p>\r\n      <p>Surface Water: {props.surfaceWater}</p>\r\n      <div>Residents:</div>\r\n      <p>Created: {formatTimestamp(props.created)}</p>\r\n      <p>Edited: {formatTimestamp(props.edited)}</p>\r\n      <p>URL: {props.url}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n\r\n\r\n\r\n      // Fetch resident names\r\n      // const residentNames = await Promise.all(props.residents.map(async (residentUrl) => {\r\n      //   const response = await fetch(residentUrl);\r\n      //   const data = await response.json();\r\n      //   return data.name;\r\n      // }));\r\n\r\n      // Fetch film titles\r\n      // const filmTitles = await Promise.all(props.films.map(async (filmUrl) => {\r\n      //   const response = await fetch(filmUrl);\r\n      //   const data = await response.json();\r\n      //   return data.title;\r\n      // }));\r\n\r\n      // setPlanetData({\r\n      //   residents: residentNames,\r\n      //   films: filmTitles,\r\n      // });"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}